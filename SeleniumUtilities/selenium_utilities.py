import time
import random

from selenium.webdriver import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (TimeoutException, ElementClickInterceptedException, NoSuchElementException)
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from typing import Dict, List, Optional, Any
from config import logger  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞


class SeleniumUtilities:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Selenium, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å.
    """

    @staticmethod
    def open_tab(self, url):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É."""
        self.driver.switch_to.new_window()
        self.driver.get(url)
        logger.debug(f"(open_tab) –û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞: {url}")

    @staticmethod
    def switch_to_new_window(driver, current_windows, timeout=15):
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞/–≤–∫–ª–∞–¥–∫–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            driver: —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver
            current_windows: —Ç–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞
            timeout: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            handle –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        """

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        WebDriverWait(driver, timeout).until(EC.new_window_is_opened(current_windows))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ
        new_windows = driver.window_handles

        # –ù–∞—Ö–æ–¥–∏–º handle –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        new_window = list(set(new_windows) - set(current_windows))[0]

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        driver.switch_to.window(new_window)
        return new_window

    @staticmethod
    def find_element_safely(driver, by, selector, timeout=10):
        """
        –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

        Args:
            driver: Selenium WebDriver instance.
            by: –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, By.XPATH, By.ID).
            selector: –°–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞.
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

        Returns:
            WebElement, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ None –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        try:
            wait = WebDriverWait(driver, timeout)
            element = wait.until(EC.presence_of_element_located((by, selector)))
            return element
        except TimeoutException:
            logger.debug(f"Element '{selector}' not found after {timeout} seconds")
            return None
        except Exception as e:
            logger.error(f"Error finding element '{selector}': {e}")
            return None

    @staticmethod
    def find_elements_safely(driver, by, selector, timeout=10):
        """
        –ù–∞–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

        Args:
            driver: Selenium WebDriver instance.
            by: –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, By.XPATH, By.ID).
            selector: –°–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

        Returns:
            List[WebElement], –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        """
        try:
            wait = WebDriverWait(driver, timeout)
            elements = wait.until(EC.presence_of_all_elements_located((by, selector)))
            return elements
        except TimeoutException:
            logger.debug(f"Elements '{selector}' not found after {timeout} seconds")
            return []
        except Exception as e:
            logger.error(f"Error finding elements '{selector}': {e}")
            return []


    @staticmethod
    def click_safely(element, retry_count=3, base_delay=1, jitter_range=(0.8, 1.2), exp_factor=2):
        """
        –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö.

        Args:
            element: WebElement –¥–ª—è –∫–ª–∏–∫–∞
            retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∫–ª–∏–∫–∞
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            jitter_range: –ö–æ—Ä—Ç–µ–∂ (–º–∏–Ω., –º–∞–∫—Å.) –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            exp_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏.

        Returns:
            True, –µ—Å–ª–∏ –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        if not element:
            logger.error("Element is None, cannot click")
            return False

        for attempt in range(retry_count):
            try:
                element.click()
                logger.debug(f" (SeleniumUtilities.click_safely), Element clicked successfully on attempt {attempt + 1}")
                return True
            except ElementClickInterceptedException:
                if attempt < retry_count - 1:
                    retry_delay = base_delay * (exp_factor ** attempt)
                    jitter = random.uniform(*jitter_range)
                    time.sleep(retry_delay * jitter)
                else:
                    logger.debug(f"Button click intercepted after {retry_count} attempts")
                    return False
            except Exception as e:
                logger.error(f"Error clicking element: {e}")
                return False

        return False

    @staticmethod
    def find_button_by_text(driver, text, timeout=10):
        """
        –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.

        Args:
            driver: Selenium WebDriver instance.
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

        Returns:
            WebElement –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ None –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        if not text or text.strip() == "":
            logger.debug("Empty text provided for button search")
            return None

        xpath = f"//button[contains(normalize-space(text()), '{text}')]"
        return SeleniumUtilities.find_element_safely(driver, By.XPATH, xpath, timeout=timeout)

    @staticmethod
    def parse_interactive_elements(main_block) -> Dict[str, List[Dict]]:
        """–ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç, –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å –∏—Ö –º–µ—Ç–∫–∞–º–∏."""

        def get_xpath(element) -> str:
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XPath –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
            classes = element.get_attribute("class")
            element_id = element.get_attribute("id")
            if element_id:
                return f"//{element.tag_name}[@id='{element_id}']"
            if classes:
                return f"//{element.tag_name}[contains(@class, '{classes.split()[0]}')]"
            return f"//{element.tag_name}"

        result = {"elements_info": []} # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–º

        if not main_block:
            logger.error("main_block is None, cannot parse elements")
            return {"elements_info": []}

        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ main_block
        all_elements = main_block.find_elements(By.XPATH, ".//*")  # –í—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if not all_elements:
            logger.warning("main_block –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return result

        for element in all_elements:

            element_info = {
                "tag_name": element.tag_name,
                "element": element,
                "text": element.text.strip() if element.text else "",
                "is_button": element.tag_name.lower() == "button",  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–æ–π?
                "is_input_field": element.tag_name.lower() in ["input", "textarea"],
                "classes": element.get_attribute("class") or "",
                "aria_label": element.get_attribute("aria-label") or "",
                "xpath": get_xpath(element)
            }
            result["elements_info"].append(element_info)

        return result

    @staticmethod
    def find_click_button(main_block, text_btn):
        """–ò—â–µ—Ç –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ, –≤—ã–ø–æ–ª–Ω—è—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        parsed_data = SeleniumUtilities.parse_interactive_elements(main_block)

        for el in parsed_data['elements_info']:
            try:
                if el['is_button'] and el['text'] and isinstance(el['text'], str) and text_btn in el['text'].strip():
                    if el['element'] and el['element'].is_displayed() and el['element'].is_enabled():
                        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {el['text']}, XPath: {el['xpath']}")

                        if SeleniumUtilities.click_safely(el['element']):
                            logger.debug("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É—Å–ø–µ—à–µ–Ω")
                            time.sleep(2)  # –ü–æ–¥–æ–∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∫–ª–∏–∫–æ–º

                            # üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                            try:
                                el['element'] = main_block.find_element(By.XPATH, el['xpath'])
                                if el['element'].is_displayed() and el['element'].is_enabled():
                                    if SeleniumUtilities.click_safely(el['element']):
                                        logger.debug("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                                        return True
                                    else:
                                        logger.debug("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è")
                                        return True
                            except NoSuchElementException:
                                logger.warning("–≠–ª–µ–º–µ–Ω—Ç –∏—Å—á–µ–∑ –∏–∑ DOM –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                                return True
                        else:
                            raise Exception("Failed to interact with button")

                    else:
                        raise Exception("–≠–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π {text_btn}: {str(e)}")

    @staticmethod
    def find_input_field_click_paste(main_block, aria_label, text_input):
        """–ò—â–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ aria-label, –∫–ª–∏–∫–∞–µ—Ç –ø–æ –Ω–µ–º—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç."""
        parsed_data = SeleniumUtilities.parse_interactive_elements(main_block)

        for el in parsed_data['elements_info']:
            try:
                if el['is_input_field'] and el['element'] and el['aria_label'].strip().lower() == aria_label.lower():
                    if el['element'].is_displayed() and el['element'].is_enabled():
                        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ '{aria_label}', XPath: {el['xpath']}")

                        el['element'].click()
                        el['element'].clear()
                        el['element'].send_keys(text_input)

                        logger.debug(f"–¢–µ–∫—Å—Ç '{text_input}' —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ '{aria_label}'")
                        return True
                    else:
                        logger.warning(f"–ü–æ–ª–µ '{aria_label}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ '{aria_label}': {str(e)}")

        return False

    # @staticmethod
    # def find_text(main_block, text_input) -> Dict[str, str]:
    #     """–ü–∞—Ä—Å–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—â–µ—Ç —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã."""
    #     parsed_data = SeleniumUtilities.parse_interactive_elements(main_block)
    #
    #     for el in parsed_data['elements_info']:
    #         try:
    #             if el['text'] and isinstance(el['text'], str):
    #                 normalized_text = el['text'].strip().lower()
    #                 if any(word.lower() in normalized_text for word in text_input):
    #                     logger.debug(f"–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç '{el['text']}' –ø–æ —É—Å–ª–æ–≤–∏—é '{text_input}'")
    #                     return {"message": el["text"]}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    #         except Exception as e:
    #             logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–∞ '{text_input}': {str(e)}")
    #
    #     return {"message": "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    @staticmethod
    def find_text(main_block, text_input, check_visibility=True) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        parsed_data = SeleniumUtilities.parse_interactive_elements(main_block)
        logger.debug(f"–ò—â–µ–º —Ç–µ–∫—Å—Ç: {text_input}")

        found_elements = []
        for el in parsed_data['elements_info']:
            try:
                if el['text'] and isinstance(el['text'], str):
                    text = el['text'].strip().lower()
                    element = el['element']

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    if check_visibility and not element.is_displayed():
                        logger.warning("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–µ–Ω")
                        continue

                    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    if any(word.lower() in text for word in text_input):
                        found_elements.append(element)
                        logger.debug(f"–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç '{el['text']}' –ø–æ —É—Å–ª–æ–≤–∏—é '{text_input}'")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")

        return {
            "found": bool(found_elements),
            "elements": found_elements,
            "message": "–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {}".format(len(found_elements)) if found_elements else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }

    @staticmethod
    def handle_element_obstruction(driver, element):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ—à–∞—é—â–∏–µ –æ–∫–Ω–∞."""
        try:
            # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥—Ä—É–≥–∏–º
            is_obstructed = driver.execute_script("""
                var elem = arguments[0];
                var rect = elem.getBoundingClientRect();
                var elemAtPoint = document.elementFromPoint(rect.x + rect.width/2, rect.y + rect.height/2);
                return { "obstructed": elemAtPoint !== elem, "obstructing_element": elemAtPoint.tagName, "obstructing_classes": elemAtPoint.className };
            """, element)

            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è: {is_obstructed}")

            if is_obstructed["obstructed"]:
                logger.warning(f"–≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º: {is_obstructed}")
                logger.warning("–ò—â–µ–º –º–µ—à–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")

                # üìå –ò—â–µ–º –º–µ—à–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                obstructing_elements = driver.find_elements(By.XPATH,
                                                            "//div[contains(@class, 'popup') or contains(@class, 'modal') or contains(@class, 'overlay') or contains(@class, 'dialog') or contains(@class, 'backdrop')]")

                for obstr_elem in obstructing_elements:
                    try:
                        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞: {obstr_elem.get_attribute('class')}")

                        # üîÑ –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                        close_buttons = obstr_elem.find_elements(By.XPATH,
                                                                 ".//button[contains(text(), 'Close') or contains(@class, 'close')]")
                        if close_buttons and close_buttons[0].is_displayed() and close_buttons[0].is_enabled():
                            close_buttons[0].click()
                            logger.debug("–ú–µ—à–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!")
                            time.sleep(1)  # üîÑ –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

                        # üìå –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º `Esc`
                        if not close_buttons:
                            driver.send_keys(Keys.ESCAPE)
                            logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ Escape")

                        return True  # ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–∫—Ä—ã—Ç–æ

                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ: {str(e)}")

            else:
                logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç –ù–ï –ø–µ—Ä–µ–∫—Ä—ã—Ç, –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å: {is_obstructed}")
                return False  # ‚úÖ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –Ω–µ—Ç

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
            return False

    @staticmethod
    def find_and_click_child_by_text(parent_element, child_text, partial_match=True):
        """
        –ò—â–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –Ω–µ–º—É.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            parent_element: WebElement - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫
            child_text: str - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            partial_match: bool - –µ—Å–ª–∏ True, –∏—â–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool - True, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –ø–æ –Ω–µ–º—É –∫–ª–∏–∫–Ω—É–ª–∏, –∏–Ω–∞—á–µ False
        """
        try:
            parsed_data = SeleniumUtilities.parse_interactive_elements(parent_element)

            for el in parsed_data['elements_info']:
                try:
                    if el['text'] and isinstance(el['text'], str):
                        element_text = el['text'].strip()
                        text_match = (child_text.lower() in element_text.lower()) if partial_match \
                            else (child_text.lower() == element_text.lower())

                        if text_match and el['element'].is_displayed() and el['element'].is_enabled():
                            logger.debug(f"–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: '{element_text}'. –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞...")

                            if SeleniumUtilities.click_safely(el['element']):
                                logger.debug(f"–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º: '{element_text}'")
                                return True
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º: '{element_text}'")
                except Exception as e:
                    logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
                    continue

            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: '{child_text}'")
            return False

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ find_and_click_child_by_text: {str(e)}")
            return False